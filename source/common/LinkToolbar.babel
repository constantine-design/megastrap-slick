/** @jsx wp.element.createElement */


/* LINK TOOLBAR
-----------------------------------------------------*/

/* usage all arguments required

// required attributes for toolbar: LinkToolbar
url: { type: 'string', default: '#', },
opensInNewTab: { type: 'boolean', default: false, },

//Link toolber for BlockControls use it as a pattern
<LinkToolbar
	value={ { url: props.attributes.url, opensInNewTab: props.attributes.opensInNewTab } }
	onChange={ ( nextValue ) => {
		if ( nextValue.url != undefined ) props.setAttributes( { url : nextValue.url} );
		if ( nextValue.opensInNewTab != undefined ) props.setAttributes( { opensInNewTab: nextValue.opensInNewTab} );
	} }
/>

*/

export function LinkToolbar(args) {
	const { __ } = wp.i18n;
	const { Toolbar, ToolbarButton, Popover } = wp.components;
	const {__experimentalLinkControl, URLPicker } = wp.blockEditor;
	const LinkControl = __experimentalLinkControl;
	const { useState, Fragment } = wp.element;
	const [isPoupoverOpen, setPoupoverOpen] = useState( false );
	const ImgLink = () => (
		<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" role="img" aria-hidden="true" focusable="false">
			<path d="M15.6 7.2H14v1.5h1.6c2 0 3.7 1.7 3.7 3.7s-1.7 3.7-3.7 3.7H14v1.5h1.6c2.8 0 5.2-2.3 5.2-5.2 0-2.9-2.3-5.2-5.2-5.2zM4.7 12.4c0-2 1.7-3.7 3.7-3.7H10V7.2H8.4c-2.9 0-5.2 2.3-5.2 5.2 0 2.9 2.3 5.2 5.2 5.2H10v-1.5H8.4c-2 0-3.7-1.7-3.7-3.7zm4.6.9h5.3v-1.5H9.3v1.5z"></path>
		</svg>
	);
	return (
		<Fragment>
			<ToolbarButton
				icon={ ImgLink } // dashicons analog is "admin-links"
				label={ __( "Link" ) }
				onClick={ ()=> { setPoupoverOpen(true); } }
			/>
			{ isPoupoverOpen && (
				<Popover  onClose={ ()=> { setPoupoverOpen(false); } } position="bottom center">
					<__experimentalLinkControl
						className="wp-block-navigation-link__inline-link-input"
						value={ args.value }
						onChange={ args.onChange }
					/>
				</Popover>
			) }
		</Fragment>
	)
}
