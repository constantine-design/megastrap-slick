/** @jsx wp.element.createElement */

import { PannelUltimateBgControl } from '../common/PannelUltimateBgControl.js';
import { SliderControlsPannel } from '../common/SliderControlsPannel.js';

export function ControlsSetParent(args) {

  /* definitions */

  const props = args.propsObject;
  const att = args.propsObject.attributes;

  const { __ } = wp.i18n;
  const { MediaUpload, MediaUploadCheck, MediaPlaceholder, MediaReplaceFlow } = wp.blockEditor;
  const { BlockVerticalAlignmentToolbar, BlockControls, InspectorControls, AlignmentToolbar } = wp.blockEditor;
  const {
    Button, ButtonGroup, ToolbarGroup, Toolbar, ToolbarButton, Dashicon, SVG, Path, PanelBody, PanelRow, SelectControl, ColorIndicator,
    RangeControl, Flex, FlexItem, FlexBlock, Icon, CheckboxControl, Disabled, ToggleControl, __experimentalRadioGroup, __experimentalRadio
  } = wp.components;
  const { useState, useEffect, Fragment } = wp.element;
  const { useSelect } = wp.data;

  const slickPath = "#html-gallery-"+att.blockID;
  function stop() {
    jQuery(slickPath+".slick-initialized").slick( 'unslick' );
  }

  let responsiveOptions = [];
  if ( props.attributes.isUnsilkOnMobile ) {
    responsiveOptions.push({ breakpoint: 1, settings: 'unslick' });
    responsiveOptions.push({ breakpoint: 480, settings: { slidesToShow: props.attributes.slidesToShow, slidesToScroll: props.attributes.slidesToScroll } });
  }
  if ( att.responsiveSM ) responsiveOptions.push({ breakpoint: 576, settings: { slidesToShow: att.slidesToShowSM, slidesToScroll: att.slidesToScrollSM } });
  if ( att.responsiveMD ) responsiveOptions.push({ breakpoint: 768, settings: { slidesToShow: att.slidesToShowMD, slidesToScroll: att.slidesToScrollMD } });
  if ( att.responsiveLG ) responsiveOptions.push({ breakpoint: 992, settings: { slidesToShow: att.slidesToShowLG, slidesToScroll: att.slidesToScrollLG } });
  if ( att.responsiveXL ) responsiveOptions.push({ breakpoint: 1200, settings: { slidesToShow: att.slidesToShowXL, slidesToScroll: att.slidesToScrollXL } });
  if ( att.responsiveXXL ) responsiveOptions.push({ breakpoint: 1400, settings: { slidesToShow: att.slidesToShowXXL, slidesToScroll: att.slidesToScrollXXL } });

  function start() {
    jQuery(slickPath).not('.slick-initialized').slick({
      slidesToShow: att.slidesToShow,
      slidesToScroll: 1,
      arrows: att.arrows,
      dots: att.dots,
      infinite: att.infinite,
      autoplay: att.autoplay,
      fade: att.fade,
      pauseOnHover: att.pauseOnHover,
      pauseOnFocus: att.pauseOnFocus,
      touchMove: false,
      swipeToSlide: false,
      mobileFirst: true,
      responsive: responsiveOptions,
      centerMode: att.centerMode,
      adaptiveHeight: att.adaptiveHeight,
      variableWidth: att.variableWidth,
    });
  }
  function prevSlide() {
    jQuery(slickPath).slick( 'slickPrev' );
  }
  function nextSlide() {
    jQuery(slickPath).slick( 'slickNext' );
  }
  function addEmptySlide(slideProps={}) {
    var block = wp.blocks.createBlock('k-blocks-slick-html-child/k-blocks', slideProps);
    wp.data.dispatch('core/block-editor').insertBlocks(block, 0, props.clientId);
  }
  function setSliderAttribute( attribute, newcontent ) {
    props.setAttributes( { [attribute]: newcontent } );
    jQuery(slickPath+".slick-initialized").slick('slickSetOption', { [attribute]: newcontent }, true);
  }
  function setRestartAttribute( attribute, newcontent ) {
    stop();
    props.setAttributes( { [attribute]: newcontent } );
  }

  useEffect(() => {
    if ( props.editMode ) stop();
    else start();
  });
  window.addEventListener("resize", () => {
    if ( props.editMode ) stop();
    else start();
  });

  /* output */

  return (

    <Fragment>

      <BlockControls>
        { !props.editMode &&
          <Toolbar>
            <ToolbarButton
              icon='arrow-left-alt2'
              title='Previous Slide'
              onClick={ prevSlide }
            />
            <ToolbarButton
              icon='arrow-right-alt2'
              title='Next Slide'
              onClick={ nextSlide }
            />
          </Toolbar>
        }
        {/* disable adding */}
        { false &&

          <Toolbar>
            <ToolbarButton
              icon='plus-alt2'
              title='Add new slide before'
              onClick={ addEmptySlide }
            />
          </Toolbar>

        }
        <Toolbar>
          <ToolbarButton
            icon='edit'
            title='Edit mode'
            onClick={ props.toggleEditMode }
          >
            { !props.editMode ? __('Edit mode') : __('Preview mode') }
          </ToolbarButton>

        </Toolbar>
      </BlockControls>

      <InspectorControls>

        <PanelBody title={__('Slides options')} initialOpen={ true }>
          <Button
            icon='edit'
            title='Edit mode'
            isSecondary
            style = { { marginTop: '0.5rem', marginBottom: '1.5rem', padding: '6px 12px 6px 6px'  } }
            onClick={ props.toggleEditMode }
            isActive = { props.editMode }
          >
            { props.editMode && __('Preview mode') } { !props.editMode && __('Edit mode') }
          </Button>
          <RangeControl
            value={ att.slidesToShow }
            onChange={ (newval) => {
              if (newval!=1) props.setAttributes( { fade: false } );
              setSliderAttribute( 'slidesToShow', newval);
            } }
            min={ 1 }
            max={ 12 }
            label={ __('Default slides to show') }
          />
          <RangeControl
            value={ att.slidesToScroll }
            onChange={ (newval) => setSliderAttribute( 'slidesToScroll', newval) }
            min={ 1 }
            max={ 12 }
            label={ __('Default slides to scroll') }
          />
          <ToggleControl
            label={__('Disable slider on mobile')}
            checked={ props.attributes.isUnsilkOnMobile }
            onChange={ () => setRestartAttribute( 'isUnsilkOnMobile', !props.attributes.isUnsilkOnMobile )  }
          />
          {/* small breakpoint */}
          <CheckboxControl
            label={__('Add breakpoint'+' SM')}
            checked={ att.responsiveSM }
            onChange={ () => {
              if (att.responsiveSM) props.setAttributes( { fade: false } );
              setRestartAttribute( 'responsiveSM', !att.responsiveSM );
            }  }
          />
          { att.responsiveSM && (
            <Fragment>
              <RangeControl
                beforeIcon="columns"
                label={__('Slides to show')}
                value={ att.slidesToShowSM }
                onChange={ (newcontent) => setRestartAttribute( 'slidesToShowSM', newcontent )  }
                min={ 1 }
                max={ 12 }
              />
              <RangeControl
                beforeIcon="share-alt2"
                label={__('Slides to scroll')}
                value={ att.slidesToScrollSM }
                onChange={ (newcontent) => setRestartAttribute( 'slidesToScrollSM', newcontent )  }
                min={ 1 }
                max={ 12 }
              />
            </Fragment>
          )}
          {/* medium breakpoint */}
          <CheckboxControl
            label={__('Add breakpoint'+' MD')}
            checked={ att.responsiveMD }
            onChange={ () => {
              if (att.responsiveSM) props.setAttributes( { fade: false } );
              setRestartAttribute( 'responsiveMD', !att.responsiveMD );
            }  }
          />
          { att.responsiveMD && (
            <Fragment>
              <RangeControl
                beforeIcon="columns"
                label={__('Slides to show')}
                value={ att.slidesToShowMD }
                onChange={ (newcontent) => {
                  if (att.responsiveSM) props.setAttributes( { fade: false } );
                  setRestartAttribute( 'slidesToShowMD', newcontent );
                }  }
                min={ 1 }
                max={ 12 }
              />
              <RangeControl
                beforeIcon="share-alt2"
                label={__('Slides to scroll')}
                value={ att.slidesToScrollMD }
                onChange={ (newcontent) => setRestartAttribute( 'slidesToScrollMD', newcontent )  }
                min={ 1 }
                max={ 12 }
              />
            </Fragment>
          )}
          {/* large breakpoint */}
          <CheckboxControl
            label={__('Add breakpoint'+' LG')}
            checked={ att.responsiveLG }
            onChange={ () => {
              if (att.responsiveSM) props.setAttributes( { fade: false } );
              setRestartAttribute( 'responsiveLG', !att.responsiveLG );
            }  }
          />
          { att.responsiveLG && (
            <Fragment>
              <RangeControl
                beforeIcon="columns"
                label={__('Slides to show')}
                value={ att.slidesToShowLG }
                onChange={ (newcontent) => setRestartAttribute( 'slidesToShowLG', newcontent )  }
                min={ 1 }
                max={ 12 }
              />
              <RangeControl
                beforeIcon="share-alt2"
                label={__('Slides to scroll')}
                value={ att.slidesToScrollLG }
                onChange={ (newcontent) => setRestartAttribute( 'slidesToScrollLG', newcontent )  }
                min={ 1 }
                max={ 12 }
              />
            </Fragment>
          )}
          {/* XL breakpoint */}
          <CheckboxControl
            label={__('Add breakpoint'+' XL')}
            checked={ att.responsiveXL }
            onChange={ () => {
              if (att.responsiveSM) props.setAttributes( { fade: false } );
              setRestartAttribute( 'responsiveXL', !att.responsiveXL );
            }  }
          />
          { att.responsiveXL && (
            <Fragment>
              <RangeControl
                beforeIcon="columns"
                label={__('Slides to show')}
                value={ att.slidesToShowXL }
                onChange={ (newcontent) => setRestartAttribute( 'slidesToShowXL', newcontent )  }
                min={ 1 }
                max={ 12 }
              />
              <RangeControl
                beforeIcon="share-alt2"
                label={__('Slides to scroll')}
                value={ att.slidesToScrollXL }
                onChange={ (newcontent) => setRestartAttribute( 'slidesToScrollXL', newcontent )  }
                min={ 1 }
                max={ 12 }
              />
            </Fragment>
          )}
          {/* XXL breakpoint */}
          <CheckboxControl
            label={__('Add breakpoint'+' XXL')}
            checked={ att.responsiveXXL }
            onChange={ () => {
              if (att.responsiveSM) props.setAttributes( { fade: false } );
              setRestartAttribute( 'responsiveXXL', !att.responsiveXXL );
            }  }
          />
          { att.responsiveXXL && (
            <Fragment>
              <RangeControl
                beforeIcon="columns"
                label={__('Slides to show')}
                value={ att.slidesToShowXXL }
                onChange={ (newcontent) => setRestartAttribute( 'slidesToShowXXL', newcontent )  }
                min={ 1 }
                max={ 12 }
              />
              <RangeControl
                beforeIcon="share-alt2"
                label={__('Slides to scroll')}
                value={ att.slidesToScrollXXL }
                onChange={ (newcontent) => setRestartAttribute( 'slidesToScrollXXL', newcontent )  }
                min={ 1 }
                max={ 12 }
              />
            </Fragment>
          )}
        </PanelBody>


        <PanelBody title={__('Slider options')}  initialOpen={ true }>
          <Fragment>
            <ToggleControl
              label={__('Arrows')}
              checked={ att.arrows }
              onChange={ () => setSliderAttribute( 'arrows', !att.arrows )  }
            />
            <ToggleControl
              label={__('Dots')}
              checked={ att.dots }
              onChange={ () => setSliderAttribute( 'dots', !att.dots )  }
            />
            <ToggleControl
              label={__('Infinite')}
              checked={ att.infinite }
              onChange={ () => setRestartAttribute( 'infinite', !att.infinite )  }
            />
            <ToggleControl
              label={__('Autoplay')}
              checked={ att.autoplay }
              onChange={ () => setSliderAttribute( 'autoplay', !att.autoplay )  }
            />
            { props.attributes.autoplay &&
              <Fragment>
                <ToggleControl
                  label={__('Pause Autoplay on Hover')}
                  checked={ att.pauseOnHover }
                  onChange={ () => setSliderAttribute( 'pauseOnHover', !att.pauseOnHover )  }
                />
                <ToggleControl
                  label={__('Pause Autoplay on Focus')}
                  checked={ att.pauseOnFocus }
                  onChange={ () => setSliderAttribute( 'pauseOnFocus', !att.pauseOnFocus )  }
                />
              </Fragment>
            }
            <ToggleControl
              label={__('Center Mode')}
              checked={ att.centerMode }
              onChange={ () => setRestartAttribute( 'centerMode', !att.centerMode )  }
            />
            <ToggleControl
              label={__('Adaptive Height')}
              checked={ att.adaptiveHeight }
              onChange={ () => setRestartAttribute( 'adaptiveHeight', !att.adaptiveHeight )  }
            />
            {/*
              <ToggleControl
              label={__('Variable Width')}
              checked={ att.variableWidth }
              onChange={ () => setRestartAttribute( 'variableWidth', !att.variableWidth )  }
              />
            */}
            <ToggleControl
              label={__('Fade')}
              checked={ att.fade }
              onChange={ () => {
                props.setAttributes( { responsiveSM: false, responsiveMD: false, responsiveLG: false, responsiveXL: false, slidesToShow: 1, slidesToScroll: 1 } );
                setRestartAttribute( 'fade', !att.fade );
              } }
            />
          </Fragment>
        </PanelBody>


        <PanelBody title={__('Style options')} initialOpen={ false }>
          <RangeControl
            value={ att.minHeight }
            onChange={ ( newvalue ) => props.setAttributes( { minHeight: newvalue } ) }
            min={ 0 }
            max={ 50 }
            label={ __('Slide body min height'+' (Rem)') }
            type="Rem"
          />
          <RangeControl
            value={ props.attributes.slidePadding }
            onChange={ ( newvalue ) => setRestartAttribute( 'slidePadding', newvalue ) }
            min={ 0 }
            max={ 12 }
            step={ 0.01 }
            label={ __('Margin beetweeen slides (0.01 Rem)') }
          />
          { props.attributes.slidePadding != 0 &&
            <CheckboxControl
              label={__('Align slide padding to edjes')}
              checked={ props.attributes.isSlidePaddingAlign }
              onChange={ () => setRestartAttribute( 'isSlidePaddingAlign', !props.attributes.isSlidePaddingAlign )  }
            />
          }
        </PanelBody>


        <SliderControlsPannel
          arrows={ att.arrows }
          arrowsColorClass={ att.arrowsColorClass }
          setArrowsColorClass={ (val) => props.setAttributes({ arrowsColorClass: val }) }
          arrowsSizeClass={ att.arrowsSizeClass }
          setArrowsSizeClass={ (size) => props.setAttributes({ arrowsSizeClass: size }) }
          arrowsPositionClass={ att.arrowsPositionClass }
          setArrowsPositionClass={ ( pos ) => props.setAttributes({ arrowsPositionClass: pos }) }
          dots={ att.dots }
          dotsColorClass={ att.dotsColorClass }
          setDotsColorClass={ (val) => props.setAttributes({ dotsColorClass: val }) }
          dotsSizeClass={ att.dotsSizeClass }
          setDotsSizeClass={ (size) => props.setAttributes({ dotsSizeClass: size }) }
          dotsPositionClass={ att.dotsPositionClass }
          setDotsPositionClass={ ( pos ) => props.setAttributes({ dotsPositionClass: pos }) }
          isControlsCustom={ att.isControlsCustom }
          setIsControlsCustom={ (val) => props.setAttributes({ isControlsCustom: val }) }
        />


      </InspectorControls>

    </Fragment>

  );

}
