/** @jsx wp.element.createElement */

import { PannelUltimateBgControl } from '../common/PannelUltimateBgControl.js';

export function ControlsChild(args) {

  /* definitions */

  const props = args.propsObject;
  const atts = props.attributes;

  const { __ } = wp.i18n;
  const { MediaUpload, MediaUploadCheck, MediaPlaceholder, MediaReplaceFlow } = wp.blockEditor;
  const { BlockVerticalAlignmentToolbar, BlockControls, InspectorControls, AlignmentToolbar } = wp.blockEditor;
  const {
    Button, ToolbarGroup, Toolbar, ToolbarButton, Dashicon, SVG, Path, PanelBody, PanelRow, SelectControl,
    RangeControl, Flex, FlexItem, FlexBlock, Icon, CheckboxControl, Disabled
  } = wp.components;
  const { useState, useEffect, Fragment } = wp.element;

  /* output */

  return (

    <Fragment>

      <BlockControls>
      </BlockControls>

      <InspectorControls>
        <PanelBody title={__('Breakpoints')} >
          <div className="k-bs-grid-cols-controls">

            <Flex style={ { paddingLeft: '0.8rem', paddingRight: '0.8rem' } } >
              <FlexItem className="k-bs-grid-cols-selector" style={ { paddingTop: '0.6rem', paddingBottom: '0.6rem' } } >
                <CheckboxControl label={ __('Def') } checked={ Boolean(atts.colBreakpoint) }
                  onChange={ () => { if (Boolean(atts.colBreakpoint)) props.setAttributes({ colBreakpoint: 0 }); else props.setAttributes({ colBreakpoint: 6 }); } }
                />
              </FlexItem>
              <FlexBlock className="k-bs-grid-cols-range">
                { Boolean(atts.colBreakpoint) && (
                  <RangeControl value={ atts.colBreakpoint } min={ 1 } max={ 12 }
                    onChange={ ( newvalue ) => props.setAttributes( { colBreakpoint: newvalue }) }
                  />
                )}
              </FlexBlock>
            </Flex>

            <Flex style={ { paddingLeft: '0.8rem', paddingRight: '0.8rem' } } >
              <FlexItem className="k-bs-grid-cols-selector" style={ { paddingTop: '0.6rem', paddingBottom: '0.6rem' } } >
                <CheckboxControl label={ "SM" } checked={ Boolean(atts.colSmBreakpoint) }
                  onChange={ () => { if (Boolean(atts.colSmBreakpoint)) props.setAttributes({ colSmBreakpoint: 0 }); else props.setAttributes({ colSmBreakpoint: 6 }); } }
                />
              </FlexItem>
              <FlexBlock className="k-bs-grid-cols-range">
                { Boolean(atts.colSmBreakpoint) && (
                  <RangeControl value={ atts.colSmBreakpoint } min={ 1 } max={ 12 }
                    onChange={ ( newvalue ) => props.setAttributes( { colSmBreakpoint: newvalue }) }
                  />
                )}
              </FlexBlock>
            </Flex>

            <Flex style={ { paddingLeft: '0.8rem', paddingRight: '0.8rem' } } >
              <FlexItem className="k-bs-grid-cols-selector" style={ { paddingTop: '0.6rem', paddingBottom: '0.6rem' } } >
                <CheckboxControl label={ "MD" } checked={ Boolean(atts.colMdBreakpoint) }
                  onChange={ () => { if (Boolean(atts.colMdBreakpoint)) props.setAttributes({ colMdBreakpoint: 0 }); else props.setAttributes({ colMdBreakpoint: 6 }); } }
                />
              </FlexItem>
              <FlexBlock className="k-bs-grid-cols-range">
                { Boolean(atts.colMdBreakpoint) && (
                  <RangeControl value={ atts.colMdBreakpoint } min={ 1 } max={ 12 }
                    onChange={ ( newvalue ) => props.setAttributes( { colMdBreakpoint: newvalue }) }
                  />
                )}
              </FlexBlock>
            </Flex>

            <Flex style={ { paddingLeft: '0.8rem', paddingRight: '0.8rem' } } >
              <FlexItem className="k-bs-grid-cols-selector" style={ { paddingTop: '0.6rem', paddingBottom: '0.6rem' } } >
                <CheckboxControl label={ "LG" } checked={ Boolean(atts.colLgBreakpoint) }
                  onChange={ () => { if (Boolean(atts.colLgBreakpoint)) props.setAttributes({ colLgBreakpoint: 0 }); else props.setAttributes({ colLgBreakpoint: 6 }); } }
                />
              </FlexItem>
              <FlexBlock className="k-bs-grid-cols-range">
                { Boolean(atts.colLgBreakpoint) && (
                  <RangeControl value={ atts.colLgBreakpoint } min={ 1 } max={ 12 }
                    onChange={ ( newvalue ) => props.setAttributes( { colLgBreakpoint: newvalue }) }
                  />
                )}
              </FlexBlock>
            </Flex>

            <Flex style={ { paddingLeft: '0.8rem', paddingRight: '0.8rem' } } >
              <FlexItem className="k-bs-grid-cols-selector" style={ { paddingTop: '0.6rem', paddingBottom: '0.6rem' } } >
                <CheckboxControl label={ "XL" } checked={ Boolean(atts.colXlBreakpoint) }
                  onChange={ () => { if (Boolean(atts.colXlBreakpoint)) props.setAttributes({ colXlBreakpoint: 0 }); else props.setAttributes({ colXlBreakpoint: 6 }); } }
                />
              </FlexItem>
              <FlexBlock className="k-bs-grid-cols-range">
                { Boolean(atts.colXlBreakpoint) && (
                  <RangeControl value={ atts.colXlBreakpoint } min={ 1 } max={ 12 }
                    onChange={ ( newvalue ) => props.setAttributes( { colXlBreakpoint: newvalue }) }
                  />
                )}
              </FlexBlock>
            </Flex>

          </div>
        </PanelBody>
        <PannelUltimateBgControl
          // first toolbar: color block
          colorValue={ atts.color }
          onColorChange={ ( newVal ) => props.setAttributes({ color: newVal }) }
          bgColorValue={ atts.bgColor }
          onBgColorChange={ ( newVal ) => props.setAttributes({ bgColor: newVal }) }
          // second toolbar: image block
          bgImgUrlValue={ atts.bgImage }
          bgImgIdValue={ atts.bgImageId }
          onBgImgSelect={ ( newVal ) => props.setAttributes({ bgImage: newVal.url, bgImageId: newVal.id }) }
          onSetDefaultClick={ () => props.setAttributes({ bgImage: "none", bgImageId: 0 }) }
          // bg focal for second toolbar: optional
          bgFocalValue={ atts.bgImageFocal }
          onBgImageFocalChange={ ( newVal ) => props.setAttributes({ bgImageFocal: newVal }) }
          // bg style for second toolbar: optional
          bgStyleValue={ atts.bgImageType }
          onBgStyleChange={ ( newVal ) => props.setAttributes({ bgImageType: newVal }) }
          // third toolbar: gradient overlay block
          gradientOvelayValue={ atts.bgGradient }
          onGradientOverlayChange={ ( newVal ) => props.setAttributes({ bgGradient: newVal }) }
        />
      </InspectorControls>

    </Fragment>
  );

}
