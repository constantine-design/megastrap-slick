/** @jsx wp.element.createElement */

const { __ } = wp.i18n;
const { registerBlockType } = wp.blocks;
const { InnerBlocks, MediaUpload, MediaUploadCheck } = wp.blockEditor;
const { BlockControls, InspectorControls } = wp.blockEditor;
const { useState, useEffect, Fragment } = wp.element;
const { Button } = wp.components;

import { bootstrapValignClasses } from '../common/common-functions.js';
import { PannelUltimateBgControl } from '../common/PannelUltimateBgControl.js';
import { Controls } from './controls.js';

//import { Slider }  from "../react-slick.min.js";


const SectionBlockIcon = () => (
  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M20 2H0V5H20V2Z" fill="#C4C4C4"/>
    <path d="M20 15H0V18H20V15Z" fill="#C4C4C4"/>
    <path d="M5 7H1V13H5V7Z" fill="white" stroke="#3498DB" stroke-width="2"/>
    <path d="M12 7H8V13H12V7Z" fill="white" stroke="#3498DB" stroke-width="2"/>
    <path d="M19 7H15V13H19V7Z" fill="white" stroke="#3498DB" stroke-width="2"/>
  </svg>
)


/*============================================================================*/
/*                          Classik Slick Block Begin                         */
/*============================================================================*/

registerBlockType( 'k-blocks-sclick-slider-classic/k-blocks', {
	title: __( 'Slic Slider Classic' ),
	icon: SectionBlockIcon,
	category: 'k-common-blocks',
	//parent: [ 'core/post-content' ], // only root block
	supports: { align: [ 'full' ], anchor: true, html : false},
	attributes: {
		align: {type: 'string', default: '', },
		valign: { type: 'string', default: 'center', },
    className: { type: 'string', default: '' },
    anchor: { type: 'string', },
    /* data */
    mediaID: { type: 'array', default: [] },
    mediaURL: { type: 'array', default: [] },
    mediaTHUMB: { type: 'array', default: [] },
    mediaMEDIUM: { type: 'array', default: [] },
    mediaLARGE: { type: 'array', default: [] },
    mediaCAPTION: { type: 'array', default: [] },
    mediaALT: { type: 'array', default: [] },
    blockID: { type: 'string', default: '' },
    /* options */
    arrows: { type: 'boolean', default: true },
    dots: { type: 'boolean', default: false },
    infinite: { type: 'boolean', default: false },
    autoplay: { type: 'boolean', default: false },
    centerMode: { type: 'boolean', default: false },
    adaptiveHeight: { type: 'boolean', default: false },
    variableWidth: { type: 'boolean', default: false },
    pauseOnHover: { type: 'boolean', default: false },
    fade: { type: 'boolean', default: false },
    sliderImageSize: { type: 'string', default: 'LARGE' },
    openInModal: { type: 'boolean', default: false },
    modalImageSize: { type: 'string', default: 'FULL' },
    showCaption: { type: 'boolean', default: false },
    captionAsUrl: { type: 'boolean', default: false },
    /* breakponts */
    slidesToShow: { type: 'number', default: 3 },
    slidesToScroll: { type: 'number', default: 1 },
    responsiveSM: { type: 'boolean', default: false },
    slidesToShowSM: { type: 'number', default: 1 },
    slidesToScrollSM: { type: 'number', default: 1 },
    responsiveMD: { type: 'boolean', default: false },
    slidesToShowMD: { type: 'number', default: 1 },
    slidesToScrollMD: { type: 'number', default: 1 },
    responsiveLG: { type: 'boolean', default: false },
    slidesToShowLG: { type: 'number', default: 1 },
    slidesToScrollLG: { type: 'number', default: 1 },
    responsiveXL: { type: 'boolean', default: false },
    slidesToShowXL: { type: 'number', default: 1 },
    slidesToScrollXL: { type: 'number', default: 1 },
    responsiveXXL: { type: 'boolean', default: false },
    slidesToShowXXL: { type: 'number', default: 1 },
    slidesToScrollXXL: { type: 'number', default: 1 },
    isUnsilkOnMobile: { type: 'boolean', default: false },
    /* controlls classes */
    arrowsColorClass: { type: 'string', default: '' },
    arrowsSizeClass: { type: 'string', default: '' },
    arrowsPositionClass: { type: 'string', default: '' },
    dotsColorClass: { type: 'string', default: '' },
    dotsSizeClass: { type: 'string', default: '' },
    dotsPositionClass: { type: 'string', default: '' },
    isControlsCustom: { type: 'string', default: '' },
    /* slides padding */
    slidePadding: { type: 'number', default: 0 },
    isSlidePaddingAlign: { type: 'boolean', default: false },
	},


/*=============================================================================*/
/*                                    EDIT                                     */
/*=============================================================================*/

	edit(props) {

    const att = props.attributes;

    if ( att.blockID != props.clientId ) props.setAttributes( { blockID: props.clientId } );

    /* items spaces */
    let dynamicStyle = getDynamicStyle(props);

		return (
      <div className={ "img-gallery-wrapper img-gallery-wrapper-"+att.blockID+" "+att.className+" "+controlClasses(props) }>

        {/* BLOCK CONTROLS IMPORT */}
        <Controls propsObject={props} />

        {/* PLACEHOLDER WHEN EMPTY */}
        { att.mediaID==0 && (
          <div className="components-placeholder is-large">
            <div className="components-placeholder__label"> {__('Slick Slider Gallery')} </div>
            <div className="components-placeholder__instructions">{__('Select gallery items by pressing "Edit Gallery" button.')}</div>
          </div>
        )}

        {/* EDIT RENDER
        ========================================================================*/}

        <div
          className={'k-slider'}
          id={"img-gallery-"+props.clientId} dangerouslySetInnerHTML={{ __html: sliderInnerContent(props,true) }}
        />

        <style dangerouslySetInnerHTML={{ __html: dynamicStyle}} />

    </div>
		);
	},


  /*===========================================================================*/
  /*                                   SAVE                                    */
  /*===========================================================================*/

	save(props) {

        const att = props.attributes;

        var responsiveOptionsRaw = ``;
        if ( att.isUnsilkOnMobile ) responsiveOptionsRaw += `
          { breakpoint: 1, settings: 'unslick' },
          { breakpoint: 480, settings: { slidesToShow: `+att.slidesToShow+`, slidesToScroll: `+att.slidesToScroll+`, } },`;
        if ( att.responsiveSM ) responsiveOptionsRaw += `
          { breakpoint: 576, settings: { slidesToShow: `+att.slidesToShowSM+`, slidesToScroll: `+att.slidesToScrollSM+`, } },`;
        if ( att.responsiveMD ) responsiveOptionsRaw += `
          { breakpoint: 768, settings: { slidesToShow: `+att.slidesToShowMD+`, slidesToScroll: `+att.slidesToScrollMD+`, } },`;
        if ( att.responsiveLG ) responsiveOptionsRaw += `
          { breakpoint: 992, settings: { slidesToShow: `+att.slidesToShowLG+`, slidesToScroll: `+att.slidesToScrollLG+`, } },`;
        if ( att.responsiveXL ) responsiveOptionsRaw += `
          { breakpoint: 1200, settings: { slidesToShow: `+att.slidesToShowXL+`, slidesToScroll: `+att.slidesToScrollXL+`, } },`;
        if ( att.responsiveXXL ) responsiveOptionsRaw += `
          { breakpoint: 1400, settings: { slidesToShow: `+att.slidesToShowXXL+`, slidesToScroll: `+att.slidesToScrollXXL+`, } },`;

        const frontEndScript = `
          jQuery(document).ready(function($) {
            var options = {
              slidesToShow: `+att.slidesToShow+`,
              slidesToScroll: `+att.slidesToScroll+`,
              arrows: `+att.arrows+`,
              dots: `+att.dots+`,
              infinite: `+att.infinite+`,
              autoplay: `+att.autoplay+`,
              centerMode: `+att.centerMode+`,
              adaptiveHeight: `+att.adaptiveHeight+`,
              pauseOnHover: `+att.pauseOnHover+`,
              variableWidth: `+att.variableWidth+`,
              fade: `+att.fade+`,
              mobileFirst: true,
              responsive: [`+responsiveOptionsRaw+`]
            };
            $('#img-gallery-`+att.blockID+`').not('.slick-initialized').slick(options);
            $(window).on( 'resize', function() {
              $('#img-gallery-`+att.blockID+`').not('.slick-initialized').slick(options);
            } );
          });
        `;

        let dynamicStyle = getDynamicStyle(props);

        return (

          <div className={ "img-gallery-wrapper img-gallery-wrapper-"+att.blockID+" "+controlClasses(props) }>

            <style dangerouslySetInnerHTML={{ __html: dynamicStyle}} />

            <div
              className={'k-slider'}
              id={"img-gallery-"+att.blockID} dangerouslySetInnerHTML={{ __html: sliderInnerContent(props) }}
            />

            <script dangerouslySetInnerHTML={{ __html: frontEndScript}} />

         </div>
		);

	},
} );


/*===========================================================================*/
/*                            SLIDE CONTENT OUTPUT                           */
/*===========================================================================*/

const isValidUrl = urlString=> {
  var urlPattern = new RegExp('^https?:\\/\\/'+ // validate protocol
    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // validate domain name
    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // validate OR ip (v4) address
    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // validate port and path
    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // validate query string
    '(\\#[-a-z\\d_]*)?$','i'); // validate fragment locator
  return !!urlPattern.test(urlString);
}

function sliderInnerContent(props, edit=false) {
  const att = props.attributes;
  let output = '';
  for ( let i=0; i<att.mediaID.length; i++) {
    output += '<div class="img-gallery-item"><figure class="k-block-slick-classic-item '+(att.showCaption ? 'with-caption' : 'no-caption')+'">';
    let imgUrl = att.mediaTHUMB[i];
    switch(att.sliderImageSize) {
      case 'FULL': imgUrl = att.mediaURL[i]; break;
      case 'MEDIUM': imgUrl = att.mediaMEDIUM[i]; break;
      case 'LARGE': imgUrl = att.mediaLARGE[i]; break;
    }
    if (att.mediaCAPTION[i] && isValidUrl(att.mediaCAPTION[i]) && att.captionAsUrl) {
      output += '<a href="'+(edit?'javascript:void(0)':att.mediaCAPTION[i])+'">';
    }
    output += '<img class="k-block-slick-classic-image" src="'+imgUrl+'" alt="'+att.mediaALT[i]+'">';
    if (att.mediaCAPTION[i] && att.showCaption) {
      output += '<figcaption class="k-block-slick-classic-caption">'+att.mediaCAPTION[i]+'</figcaption>';
    }
    if (att.mediaCAPTION[i] && isValidUrl(att.mediaCAPTION[i]) && att.captionAsUrl) {
      output += '</a>';
    }
    output += '</figure></div>';
  }
  return output;
}


function controlClasses(props) {
  const att = props.attributes;
  let allClasses = [];
  if (!att.isControlsCustom)  {
    if (att.arrows) allClasses =[ ...allClasses, ...[ 'has-arrows', att.arrowsColorClass, att.arrowsPositionClass, att.arrowsSizeClass ] ];
    if (att.dots) allClasses = [ ...allClasses, ...[ 'has-dots', att.dotsColorClass, att.dotsSizeClass, att.dotsPositionClass ] ];
  } else {
    allClasses = [ 'custom-controls', att.isControlsCustom ];
  }
  return allClasses.filter(e => e !== '').join(' ');
}


function getDynamicStyle(props) {
  const att = props.attributes;
  let dynamicStyle = `
    #img-gallery-`+att.blockID+` .img-gallery-item {
      padding-left: `+(att.slidePadding/2)+`rem;
      padding-right: `+(att.slidePadding/2)+`rem;
    }`;
  if ( att.isSlidePaddingAlign ) dynamicStyle += `
    #img-gallery-`+att.blockID+`:not(.slick-initialized),
    #img-gallery-`+att.blockID+` .slick-list {
      margin-left: -`+(att.slidePadding/2)+`rem;
      margin-right: -`+(att.slidePadding/2)+`rem;
    }`;
  /* not initialized galley show */
  dynamicStyle += `
    #img-gallery-`+att.blockID+`:not(.slick-initialized) { display:flex; overflow-x:hidden; }
    #img-gallery-`+att.blockID+`:not(.slick-initialized) .img-gallery-item {
      width:calc(100%/`+att.slidesToShow+`); flex-shrink: 0; flex-grow: 0;
    }`;
  if ( att.isUnsilkOnMobile ) dynamicStyle += `
    @media (max-width: 480px) {
      #img-gallery-`+att.blockID+`:not(.slick-initialized) { overflow-x:auto; }
    }`;
  if ( att.responsiveSM ) dynamicStyle += `
    @media (min-width: 576px) {
      #img-gallery-`+att.blockID+`:not(.slick-initialized) .img-gallery-item { width:calc(100%/`+att.slidesToShowSM+`); }
    }`;
  if ( att.responsiveMD ) dynamicStyle += `
    @media (min-width: 768px) {
      #img-gallery-`+att.blockID+`:not(.slick-initialized) .img-gallery-item { width:calc(100%/`+att.slidesToShowMD+`); }
    }`;
  if ( att.responsiveLG ) dynamicStyle += `
    @media (min-width: 992px) {
      #img-gallery-`+att.blockID+`:not(.slick-initialized) .img-gallery-item { width:calc(100%/`+att.slidesToShowLG+`); }
    }`;
  if ( att.responsiveXL ) dynamicStyle += `
    @media (min-width: 1200px) {
      #img-gallery-`+att.blockID+`:not(.slick-initialized) .img-gallery-item { width:calc(100%/`+att.slidesToShowXL+`); }
    }`;
  if ( att.responsiveXXL ) dynamicStyle += `
    @media (min-width: 1400px) {
      #img-gallery-`+att.blockID+`:not(.slick-initialized) .img-gallery-item { width:calc(100%/`+att.slidesToShowXXL+`); }
    }`;
  return dynamicStyle;
}
